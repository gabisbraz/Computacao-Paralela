#include <stdio.h>
#include <mpfr.h> //Biblioteca para cálculos de alta precisão
#include <omp.h> // Biblioteca para paralelismo

//Definição das constantes
#define PRECISAO 500000 // Precisão desejada para o cálculo de 'e'
#define TERMOS 500000 // Número de termos para calcular 'e'
#define TAMANHO_POR_BLOCO 20000 // Tamanho do bloco para divisão de trabalho

//Função para calcular 'e'
void calcular_e(mpfr_t resultado, int profundidade) { //mpfr_t resultado = variavel e, int profundidade = numero de termos a ser somado
    mpfr_t soma; //Variável para armazenar a soma total
    mpfr_inits2(PRECISAO, soma, NULL); // Inicializa 'soma' com a precisão definida, NULL = fim da lista

    mpfr_set_ui(soma, 0, MPFR_RNDN); // Inicializa a 'soma' como 0,  RNDN = Arredonda o número para o valor representável mais próximo

    // Define explicitamente o número de threads para o paralelismo
    omp_set_num_threads(10); // Define o número de threads como 10
    
    // Array para armazenar somas parciais de cada thread
    mpfr_t soma_parcial[omp_get_max_threads()]; 
    for (int i = 0; i < omp_get_max_threads(); ++i) {
        mpfr_init2(soma_parcial[i], PRECISAO); // Inicializa cada soma parcial com a precisão definida
        mpfr_set_ui(soma_parcial[i], 0, MPFR_RNDN); // Inicializa cada soma parcial como 0
    }
    
    // Bloco paralelo
    #pragma omp parallel
    {
        int id = omp_get_thread_num(); // Obtém o identificador da thread
        mpfr_t termo, fatorial; // Variáveis para armazenar o termo da série e o fatorial
        mpfr_inits2(PRECISAO, termo, fatorial, NULL); // Inicializa 'termo' e 'fatorial' com a precisão definida

        mpfr_set_ui(fatorial, 1, MPFR_RNDN); // Inicializa fatorial como 1

        // Divisão do loop entre as threads com blocos de tamanho TAMANHO_POR_BLOCO
        #pragma omp for schedule(static, TAMANHO_POR_BLOCO)
        for (int i = 0; i <= profundidade; ++i) {
            if (i > 0) {
                mpfr_mul_ui(fatorial, fatorial, i, MPFR_RNDN); // fatorial = fatorial * i
            }
            mpfr_ui_div(termo, 1, fatorial, MPFR_RNDN); // termo = 1 / fatorial
            mpfr_add(soma_parcial[id], soma_parcial[id], termo, MPFR_RNDN); // soma_parcial[id] += termo
        }
         // Limpa as variáveis 'termo' e 'fatorial' após o uso
        mpfr_clears(termo, fatorial, NULL);
    }

     // Combina todas as somas parciais na soma total
    for (int i = 0; i < omp_get_max_threads(); ++i) {
        mpfr_add(soma, soma, soma_parcial[i], MPFR_RNDN); // soma += soma_parcial[i]
        mpfr_clear(soma_parcial[i]); // Limpa a soma parcial após combiná-la
    }

    // Copia a soma para o resultado após o loop paralelo
    mpfr_set(resultado, soma, MPFR_RNDN);

    // Limpa a variável 'soma'
    mpfr_clear(soma);
}

int main() {
    mpfr_t e; // Variável para armazenar o valor de e
    mpfr_init2(e, PRECISAO); // Inicializa 'e' com a precisão definida

    double inicio = omp_get_wtime(); // Registra o tempo de início

    calcular_e(e, TERMOS); // Calcula o valor de e

    double fim = omp_get_wtime(); // Registra o tempo de fim

    double tempo_total = fim - inicio; // Calcula o tempo total de execução

    printf("Tempo de execução: %.6f segundos\n", tempo_total);
    printf("Número total de threads utilizadas: %d\n", omp_get_max_threads());

    // Abre o arquivo para escrever o resultado
    FILE *arquivo = fopen("resultado_e.txt", "w");
    if (arquivo == NULL) {
        fprintf(stderr, "Erro ao abrir o arquivo para escrita.\n");
        return 1;
    }

    // Escreve o valor de 'e' no arquivo
    mpfr_out_str(arquivo, 10, PRECISAO, e, MPFR_RNDN);
    fprintf(arquivo, "\n");

    // Fecha o arquivo
    fclose(arquivo);
    
    // Imprime uma mensagem indicando que o resultado foi salvo
    printf("O resultado foi salvo em 'resultado_e.txt'\n");

    mpfr_clear(e);  // Limpa a variável 'e'

    return 0;
}
